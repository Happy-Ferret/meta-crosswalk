Upstream-Status: Backport

[this is actually patch for the v8 git repository]

Signed-off-by: Raphael Kubo da Costa <raphael.kubo.da.costa@intel.com>
---
From 2e0bd36d278278e1ebede35a2a6d3e6399250ee6 Mon Sep 17 00:00:00 2001
From: dpranke <dpranke@chromium.org>
Date: Thu, 19 May 2016 23:57:45 -0700
Subject: [PATCH] Try to reland v8_snapshot GN build changes, take #3

This patch re-lands #36341 with another fix to make
the amd64-generic build work as well.

R=machenbach@chromium.org, hablich@chromium.org, adamk@chromium.org
BUG=608596, 595653
CQ_INCLUDE_TRYBOTS=tryserver.chromium.linux:chromeos_daisy_chromium_compile_only_ng,chromeos_amd64-generic_chromium_compile_only_ng,chromeos_x86-generic_chromium_compile_only_ng,linux_chromium_gn_chromeos_rel,linux_chromium_gn_chromeos_dbg

Review-Url: https://codereview.chromium.org/1996513005
Cr-Commit-Position: refs/heads/master@{#36390}
---
 BUILD.gn               |  8 ++++----
 snapshot_toolchain.gni | 52 +++++++++++++++++++++++++++++++++++++++-----------
 2 files changed, 45 insertions(+), 15 deletions(-)

diff --git a/v8/BUILD.gn b/v8/BUILD.gn
index b08fbb8..77b1621 100644
--- a/v8/BUILD.gn
+++ b/v8/BUILD.gn
@@ -611,7 +611,7 @@ action("run_mksnapshot") {
   visibility = [ ":*" ]  # Only targets in this file can depend on this.
 
   deps = [
-    ":mksnapshot($snapshot_toolchain)",
+    ":mksnapshot($v8_snapshot_toolchain)",
   ]
 
   script = "tools/run.py"
@@ -621,7 +621,7 @@ action("run_mksnapshot") {
   ]
 
   args = [
-    "./" + rebase_path(get_label_info(":mksnapshot($snapshot_toolchain)",
+    "./" + rebase_path(get_label_info(":mksnapshot($v8_snapshot_toolchain)",
                                       "root_out_dir") + "/mksnapshot",
                        root_build_dir),
     "--startup_src",
@@ -2000,7 +2000,7 @@ v8_source_set("fuzzer_support") {
 # Executables
 #
 
-if (current_toolchain == snapshot_toolchain) {
+if (current_toolchain == v8_snapshot_toolchain) {
   executable("mksnapshot") {
     visibility = [ ":*" ]  # Only targets in this file can depend on this.
 
@@ -2102,7 +2102,7 @@ executable("d8") {
   }
 }
 
-if ((current_toolchain == host_toolchain && v8_toolset_for_shell == "host") || (current_toolchain == snapshot_toolchain && v8_toolset_for_shell == "host") || (current_toolchain != host_toolchain && v8_toolset_for_shell == "target")) {
+if ((current_toolchain == host_toolchain && v8_toolset_for_shell == "host") || (current_toolchain == v8_snapshot_toolchain && v8_toolset_for_shell == "host") || (current_toolchain != host_toolchain && v8_toolset_for_shell == "target")) {
   executable("v8_shell") {
     sources = [
       "samples/shell.cc",
diff --git a/v8/snapshot_toolchain.gni b/v8/snapshot_toolchain.gni
index 4932110..ccee7ff 100644
--- a/v8/snapshot_toolchain.gni
+++ b/v8/snapshot_toolchain.gni
@@ -25,22 +25,52 @@
 # (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 # OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 
-# The snapshot needs to be compiled for the host, but compiled with
-# a toolchain that matches the bit-width of the target.
+declare_args() {
+  # The snapshot needs to be compiled for the host, but compiled with
+  # a toolchain that matches the bit-width of the target.
+  v8_snapshot_toolchain = ""
+}
 
 # TODO(GYP): For now we only support 32-bit little-endian target builds from an
 # x64 Linux host. Eventually we need to support all of the host/target
 # configurations v8 runs on.
-if (host_cpu == "x64" && host_os == "linux") {
-  if (target_cpu == "arm" || target_cpu == "mipsel" || target_cpu == "x86") {
-    snapshot_toolchain = "//build/toolchain/linux:clang_x86"
-  } else if (target_cpu == "x64" || target_cpu == "arm64" || target_cpu == "mips64el") {
-    snapshot_toolchain = "//build/toolchain/linux:clang_x64"
+if (v8_snapshot_toolchain == "") {
+  if (host_cpu == "x64" && host_os == "linux") {
+    if (target_cpu == "arm" || target_cpu == "mipsel" || target_cpu == "x86") {
+      if (target_os == "android" || is_clang) {
+        v8_snapshot_toolchain = "//build/toolchain/linux:clang_x86"
+      } else if (target_os == "chromeos") {
+        # TODO(dpranke): crbug.com/608596: Remove this clause once the
+        # CrOS ebuilds are setting v8_snapshot_toolchain directly and
+        # we've cleaned up the sysroot settings in //build.
+        v8_snapshot_toolchain = "//build/toolchain/linux:clang_x86"
+      } else {
+        v8_snapshot_toolchain = "//build/toolchain/linux:x86"
+      }
+
+    } else if (target_cpu == "x64" || target_cpu == "arm64" ||
+               target_cpu == "mips64el") {
+      if (target_os == "android" || is_clang) {
+        v8_snapshot_toolchain = "//build/toolchain/linux:clang_x64"
+      } else if (target_os == "chromeos") {
+        # TODO(dpranke): crbug.com/608596: Remove this clause once the
+        # CrOS ebuilds are setting v8_snapshot_toolchain directly and
+        # we've cleaned up the sysroot settings in //build.
+        v8_snapshot_toolchain = "//build/toolchain/linux:clang_x64"
+      } else {
+        v8_snapshot_toolchain = "//build/toolchain/linux:x64"
+      }
+    } else {
+      assert(false, "Need environment for this arch: $target_cpu")
+    }
+  } else if (host_os == "mac" && target_os == "win") {
+    v8_snapshot_toolchain = "//build/toolchain/mac:clang_$target_cpu"
   } else {
-    assert(false, "Need environment for this arch: $target_cpu")
+    v8_snapshot_toolchain = default_toolchain
   }
-} else {
-  snapshot_toolchain = default_toolchain
 }
 
-
+# TODO(dpranke): snapshot_toolchain is provided for backwards compatibility
+# and should be removed once all callers are updated to refer to
+# v8_snapshot_toolchain directly.
+snapshot_toolchain = v8_snapshot_toolchain
-- 
2.7.4

