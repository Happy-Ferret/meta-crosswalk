From 62fe1c30dc48118f9811c3e3ebb3df6827416bf1 Mon Sep 17 00:00:00 2001
From: Joone Hur <joone.hur@intel.com>
Date: Tue, 18 Jul 2017 20:37:37 -0700
Subject: [PATCH 12/13] Add support for native gpu memory buffer for Chromium
 ozone-gbm

This feature is only enable in CrOS so we need to enable it for
ozone-gbm.
---
 gpu/command_buffer/common/gpu_memory_buffer_support.cc       |  2 +-
 gpu/ipc/client/gpu_memory_buffer_impl_ozone_native_pixmap.cc |  3 ++-
 ui/ozone/platform/drm/client_native_pixmap_factory_gbm.cc    | 10 +---------
 ui/ozone/platform/drm/gpu/gbm_surface_factory.cc             |  5 -----
 4 files changed, 4 insertions(+), 16 deletions(-)

diff --git a/gpu/command_buffer/common/gpu_memory_buffer_support.cc b/gpu/command_buffer/common/gpu_memory_buffer_support.cc
index 68237a0..b132cb0 100644
--- a/gpu/command_buffer/common/gpu_memory_buffer_support.cc
+++ b/gpu/command_buffer/common/gpu_memory_buffer_support.cc
@@ -118,7 +118,7 @@ bool IsGpuMemoryBufferFormatSupported(gfx::BufferFormat format,
     case gfx::BufferFormat::YVU_420:
       return true;
     case gfx::BufferFormat::YUV_420_BIPLANAR:
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_ARM_FAMILY)
+#if defined(ARCH_CPU_ARM_FAMILY)
       // TODO(dcastagna): Determine ycbcr_420v_image on CrOS at runtime
       // querying minigbm. crbug.com/646148
       return true;
diff --git a/gpu/ipc/client/gpu_memory_buffer_impl_ozone_native_pixmap.cc b/gpu/ipc/client/gpu_memory_buffer_impl_ozone_native_pixmap.cc
index e85f23b..b6ab042a 100644
--- a/gpu/ipc/client/gpu_memory_buffer_impl_ozone_native_pixmap.cc
+++ b/gpu/ipc/client/gpu_memory_buffer_impl_ozone_native_pixmap.cc
@@ -48,7 +48,7 @@ GpuMemoryBufferImplOzoneNativePixmap::CreateFromHandle(
     gfx::BufferUsage usage,
     const DestructionCallback& callback) {
   DCHECK_LE(handle.native_pixmap_handle.fds.size(), 1u);
-
+  VLOG(1) << "GpuMemoryBufferImplOzoneNativePixmap::CreateFromHandle1";
   // GpuMemoryBufferImpl needs the FD to implement GetHandle() but
   // ui::ClientNativePixmapFactory::ImportFromHandle is expected to take
   // ownership of the FD passed in the handle so we have to dup it here in
@@ -72,6 +72,7 @@ GpuMemoryBufferImplOzoneNativePixmap::CreateFromHandle(
       ui::ClientNativePixmapFactory::GetInstance()->ImportFromHandle(
           native_pixmap_handle, size, usage);
   DCHECK(native_pixmap);
+  VLOG(1) << "GpuMemoryBufferImplOzoneNativePixmap::CreateFromHandle2";
 
   return base::WrapUnique(new GpuMemoryBufferImplOzoneNativePixmap(
       handle.id, size, format, callback, std::move(native_pixmap),
diff --git a/ui/ozone/platform/drm/client_native_pixmap_factory_gbm.cc b/ui/ozone/platform/drm/client_native_pixmap_factory_gbm.cc
index 3fd704d..2a61a04 100644
--- a/ui/ozone/platform/drm/client_native_pixmap_factory_gbm.cc
+++ b/ui/ozone/platform/drm/client_native_pixmap_factory_gbm.cc
@@ -64,7 +64,6 @@ class ClientNativePixmapFactoryGbm : public ClientNativePixmapFactory {
                format == gfx::BufferFormat::RGBA_8888;
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE:
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE_PERSISTENT: {
-#if defined(OS_CHROMEOS)
         return
 #if defined(ARCH_CPU_X86_FAMILY)
             // Currently only Intel driver (i.e. minigbm and Mesa) supports R_8
@@ -73,9 +72,6 @@ class ClientNativePixmapFactoryGbm : public ClientNativePixmapFactory {
             format == gfx::BufferFormat::RG_88 ||
 #endif
             format == gfx::BufferFormat::BGRA_8888;
-#else
-        return false;
-#endif
       }
     }
     NOTREACHED();
@@ -85,17 +81,13 @@ class ClientNativePixmapFactoryGbm : public ClientNativePixmapFactory {
       const gfx::NativePixmapHandle& handle,
       const gfx::Size& size,
       gfx::BufferUsage usage) override {
+    VLOG(1) << "ClientNativePixmapFactoryGb::ImportFromHandle\n";
     DCHECK(!handle.fds.empty());
     switch (usage) {
       case gfx::BufferUsage::SCANOUT_CPU_READ_WRITE:
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE:
       case gfx::BufferUsage::GPU_READ_CPU_READ_WRITE_PERSISTENT:
-#if defined(OS_CHROMEOS)
         return ClientNativePixmapDmaBuf::ImportFromDmabuf(handle, size);
-#else
-        NOTREACHED();
-        return nullptr;
-#endif
       case gfx::BufferUsage::GPU_READ:
       case gfx::BufferUsage::SCANOUT:
         // Close all the fds.
diff --git a/ui/ozone/platform/drm/gpu/gbm_surface_factory.cc b/ui/ozone/platform/drm/gpu/gbm_surface_factory.cc
index e45a254..b153c83 100644
--- a/ui/ozone/platform/drm/gpu/gbm_surface_factory.cc
+++ b/ui/ozone/platform/drm/gpu/gbm_surface_factory.cc
@@ -139,11 +139,6 @@ scoped_refptr<ui::NativePixmap> GbmSurfaceFactory::CreateNativePixmap(
     gfx::Size size,
     gfx::BufferFormat format,
     gfx::BufferUsage usage) {
-#if !defined(OS_CHROMEOS)
-  // Support for memory mapping accelerated buffers requires some
-  // CrOS-specific patches (using dma-buf mmap API).
-  DCHECK(gfx::BufferUsage::SCANOUT == usage);
-#endif
 
   scoped_refptr<GbmBuffer> buffer =
       drm_thread_proxy_->CreateBuffer(widget, size, format, usage);
-- 
2.7.4

