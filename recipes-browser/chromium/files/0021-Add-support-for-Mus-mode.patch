From 2b0df82cd33ab27dd29c0caaa065020cd439b31e Mon Sep 17 00:00:00 2001
From: Joone Hur <joone.hur@intel.com>
Date: Mon, 14 Aug 2017 16:19:25 -0700
Subject: [PATCH 21/26] Add support for Mus mode

---
 chrome/BUILD.gn                      |  2 +-
 chrome/app/BUILD.gn                  |  2 +-
 chrome/app/chrome_main.cc            |  2 +-
 chrome/app/chrome_main_delegate.cc   | 11 ++++-------
 chrome/app/mash/BUILD.gn             |  6 +++++-
 content/browser/browser_main_loop.cc |  1 +
 6 files changed, 13 insertions(+), 11 deletions(-)

diff --git a/chrome/BUILD.gn b/chrome/BUILD.gn
index ecda2b9..28c1edd 100644
--- a/chrome/BUILD.gn
+++ b/chrome/BUILD.gn
@@ -79,7 +79,7 @@ if (enable_package_mash_services) {
     "//services/ui/public/interfaces:constants",
   ]
 
-  if (is_chromeos) {
+  if (is_chromeos || (use_ozone && is_linux)) {
     embedded_mash_service_deps += [ "//chrome/app/mash:chrome_mus_catalog" ]
   }
 }
diff --git a/chrome/app/BUILD.gn b/chrome/app/BUILD.gn
index 7e40b44..aa82b04 100644
--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -374,7 +374,7 @@ static_library("test_support") {
       "//services/ui/public/interfaces:constants",
     ]
 
-    if (is_chromeos) {
+    if (is_chromeos || (use_ozone && is_linux)) {
       deps += [ "//chrome/app/mash:chrome_mus_catalog" ]
     }
   }
diff --git a/chrome/app/chrome_main.cc b/chrome/app/chrome_main.cc
index aec129c..93724d6 100644
--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -101,7 +101,7 @@ int ChromeMain(int argc, const char** argv) {
   }
 #endif  // defined(OS_LINUX) || defined(OS_MACOSX) || defined(OS_WIN)
 
-#if defined(OS_CHROMEOS) && BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
+#if BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
   if (service_manager::ServiceManagerIsRemote())
     params.env_mode = aura::Env::Mode::MUS;
 #endif  // BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
diff --git a/chrome/app/chrome_main_delegate.cc b/chrome/app/chrome_main_delegate.cc
index d105144..de9d058 100644
--- a/chrome/app/chrome_main_delegate.cc
+++ b/chrome/app/chrome_main_delegate.cc
@@ -114,11 +114,7 @@
 #include "mash/common/config.h"                                   // nogncheck
 #include "mash/quick_launch/public/interfaces/constants.mojom.h"  // nogncheck
 #include "services/ui/public/interfaces/constants.mojom.h"        // nogncheck
-
-#if defined(OS_CHROMEOS)
 #include "chrome/app/mash/chrome_mus_catalog.h"
-#endif
-
 #endif  // BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
 
 #if defined(OS_ANDROID)
@@ -1130,10 +1126,8 @@ service_manager::ProcessType ChromeMainDelegate::OverrideProcessType() {
 std::unique_ptr<base::Value> ChromeMainDelegate::CreateServiceCatalog() {
 #if BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
   const auto& command_line = *base::CommandLine::ForCurrentProcess();
-#if defined(OS_CHROMEOS)
   if (command_line.HasSwitch(switches::kMus))
     return CreateChromeMusCatalog();
-#endif  // defined(OS_CHROMEOS)
   if (command_line.HasSwitch(switches::kMash))
     return CreateChromeMashCatalog();
 #endif  // BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
@@ -1167,8 +1161,11 @@ bool ChromeMainDelegate::ShouldTerminateServiceManagerOnInstanceQuit(
     const service_manager::Identity& identity,
     int* exit_code) {
 #if BUILDFLAG(ENABLE_PACKAGE_MASH_SERVICES)
-  if (identity.name() == mash::common::GetWindowManagerServiceName() ||
+  if (
+#if defined(OS_CHROMEOS)
+      identity.name() == mash::common::GetWindowManagerServiceName() ||
       identity.name() == ui::mojom::kServiceName ||
+#endif
       identity.name() == content::mojom::kPackagedServicesServiceName) {
     // Quit the main process if an important child (e.g. window manager) dies.
     // On Chrome OS the OS-level session_manager will restart the main process.
diff --git a/chrome/app/mash/BUILD.gn b/chrome/app/mash/BUILD.gn
index f6f8e38..3975e39 100644
--- a/chrome/app/mash/BUILD.gn
+++ b/chrome/app/mash/BUILD.gn
@@ -63,6 +63,10 @@ source_set("embedded_services") {
   if (is_linux && !is_android) {
     deps += [ "//components/font_service:lib" ]
   }
+
+  if (is_linux && use_ozone && !is_chromeos) {
+    deps += [ ":chrome_mus_catalog" ]
+  }
 }
 
 catalog("catalog") {
@@ -100,7 +104,7 @@ catalog_cpp_source("chrome_mash_catalog") {
   generated_function_name = "CreateChromeMashCatalog"
 }
 
-if (is_chromeos) {
+if (is_chromeos || (use_ozone && is_linux)) {
   catalog("catalog_mus") {
     catalog_deps = [ "//chrome/app:catalog" ]
     embedded_services = [
diff --git a/content/browser/browser_main_loop.cc b/content/browser/browser_main_loop.cc
index 77b62d4..1a59ab1 100644
--- a/content/browser/browser_main_loop.cc
+++ b/content/browser/browser_main_loop.cc
@@ -1444,6 +1444,7 @@ int BrowserMainLoop::BrowserThreadsStarted() {
   ImageTransportFactory::Initialize();
   ImageTransportFactory::GetInstance()->SetGpuChannelEstablishFactory(factory);
 #if defined(USE_AURA)
+  // FIXME(ozone-gbm): need to set context factories here for mus mode?
   if (env_->mode() == aura::Env::Mode::LOCAL) {
     env_->set_context_factory(GetContextFactory());
     env_->set_context_factory_private(GetContextFactoryPrivate());
-- 
2.7.4

